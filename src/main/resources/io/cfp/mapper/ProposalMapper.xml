<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.cfp.mapper.ProposalMapper">

    <resultMap id="ProposalMap" type="io.cfp.model.Proposal" autoMapping="true">
        <id property="id" column="id" jdbcType="VARCHAR"/>
        <collection property="cospeakers" ofType="io.cfp.model.User">
            <id property="id" column="cospeaker_id" jdbcType="INTEGER"/>
            <result property="email" column="cospeaker_email" jdbcType="VARCHAR"/>
            <result property="firstname" column="cospeaker_firstname" jdbcType="VARCHAR"/>
            <result property="lastname" column="cospeaker_lastname" jdbcType="VARCHAR"/>
            <result property="bio" column="cospeaker_bio" jdbcType="VARCHAR"/>
            <result property="gender" column="cospeaker_gender" jdbcType="VARCHAR"/>
            <result property="imageProfilURL" column="cospeaker_imageProfilURL" jdbcType="VARCHAR"/>
            <result property="github" column="cospeaker_github" jdbcType="VARCHAR"/>
            <result property="twitter" column="cospeaker_twitter" jdbcType="VARCHAR"/>
            <result property="social" column="cospeaker_social" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>

    <sql id="proposalColumns">
        SELECT
            *,
            p.schedule_date as "schedule",
            p.schedule_heure as "scheduleHour",
            p.refs as "references",
            p.format as "format",
            p.track as "trackId",
            t.libelle as "trackLabel",
            u.id as "speaker.id",
            u.email as "speaker.email",
            u.bio as "speaker.bio",
            u.company as "speaker.company",
            u.firstname as "speaker.firstname",
            u.lastname as "speaker.lastname",
            u.gender as "speaker.gender",
            u.github as "speaker.github",
            u.googleplus as "speaker.googleplus",
            u.image_profil_url as "speaker.imageProfilURL",
            u.language as "speaker.language",
            u.phone as "speaker.phone",
            u.social as "speaker.social",
            u.tshirt_size as "speaker.tshirtSize",
            u.twitter as "speaker.twitter",
            cu.id as "cospeaker_id",
            cu.email as "cospeaker_email",
            cu.firstname as "cospeaker_firstname",
            cu.lastname as "cospeaker_lastname",
            cu.gender as "cospeaker_gender",
            cu.bio as "cospeaker_bio",
            cu.image_profil_url as "cospeaker_imageProfilURL",
            cu.github as "cospeaker_github",
            cu.twitter as "cospeaker_twitter",
            cu.social as "cospeaker_social"
        FROM proposals p
            left outer join tracks t on p.track = t.id
            left outer join users u on p.user = u.id
            left outer join cospeakers c on c.proposal_id = p.id
            left outer join users cu on c.user_id = cu.id
    </sql>

    <select id="findAll" parameterType="io.cfp.model.queries.ProposalQuery" resultMap="ProposalMap">
        <include refid="proposalColumns"/>
        <where>
            <if test="eventId">
                p.event_id = #{eventId}
            </if>
            <if test="userId">
                AND p.user = #{userId}
            </if>
            <if test="states.size != 0">
                AND p.state in
                <foreach item="item" index="index" collection="states" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
        <if test="sort.size != 0">
            ORDER BY
            <foreach item="sortItem" collection="sort" separator=",">
                ${sortItem} ${order}
            </foreach>
        </if>
    </select>

    <select id="findById" resultMap="ProposalMap">
        <include refid="proposalColumns"/>
        WHERE p.id = #{id} AND p.event_id = #{eventId}
    </select>

    <select id="count" parameterType="io.cfp.model.queries.ProposalQuery" resultType="int">
        SELECT count(*)
        FROM proposals p
        <where>
            <if test="eventId">
                p.event_id = #{eventId}
            </if>
            <if test="userId">
                AND p.user = #{userId}
            </if>
            <if test="states.size != 0">
                AND p.state in
                <foreach item="item" index="index" collection="states" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <insert id="insert" parameterType="io.cfp.model.Proposal" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO proposals (
            state,
            name,
            description,
            refs,
            difficulty,
            added,
            user,
            format,
            schedule_date,
            track,
            event_id,
            language,
            room_id,
            video,
            slides
        ) VALUES (
            #{state},
            #{name},
            #{description},
            #{references},
            #{difficulty},
            #{added},
            #{speaker.id},
            #{format},
            #{schedule},
            #{trackId},
            #{eventId},
            #{language},
            #{roomId},
            #{video},
            #{slides}
        )
    </insert>

    <update id="updateForEvent">
        UPDATE proposals
        SET name=#{it.name},
            description=#{it.description},
            refs=#{it.references},
            difficulty=#{it.difficulty},
            added=#{it.added},
            user=#{it.speaker.id},
            format=#{it.format},
            schedule_date=#{it.schedule},
            track=#{it.trackId},
            language=#{it.language},
            room_id=#{it.roomId},
            video=#{it.video},
            slides=#{it.slides}
        WHERE id = #{it.id}
        AND event_id = #{eventId}
        <if test="userId">
            AND `user` = #{userId}
        </if>
    </update>

    <update id="updateSchedule">
        UPDATE proposals
        SET
        state=#{state},
        schedule_date=#{schedule},
        schedule_heure=#{scheduleHour},
        room_id=#{roomId}
        WHERE id = #{id}
        AND event_id = #{eventId}
    </update>

    <update id="updateState" parameterType="io.cfp.model.Proposal">
        UPDATE proposals
        SET state=#{state}
        WHERE id = #{id}  AND event_id = #{eventId}
    </update>

    <update id="updateAllStateWhere">
        UPDATE proposals
        SET state=#{newState}
        WHERE event_id = #{eventId}
        AND state = #{oldState}
    </update>

    <update id="updateEventId">
        UPDATE proposals SET
        event_id = #{eventId}
        WHERE id = #{id}
    </update>

    <delete id="deleteForEvent">
        DELETE FROM proposals
        WHERE id = #{id} AND event_id = #{eventId}
    </delete>

    <delete id="deleteAllByEventId">
        DELETE FROM proposals
        WHERE event_id = #{eventId}
    </delete>

</mapper>
